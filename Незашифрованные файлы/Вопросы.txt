30 30 30 30 30 30 30 30
Тема 1. Циклы
Что такое цикл в C++?
1) Блок кода, который запускается один раз
2) Повторяющийся блок кода
3) Блок кода, который выполняется условно
4) Блок кода, который выполняется только в нечетные дни
2
Какой цикл используется, когда вы хотите выполнить код хотя бы один раз, независимо от условия?
1) for
2) while
3) do while
4) if
3
Какой цикл используется, когда вы точно знаете, сколько раз должен выполняться код?
1) for
2) while
3) do while
4) if
1
Какой оператор используется для преждевременного выхода из цикла?
1) break
2) continue
3) return
4) exit
1
Какой оператор используется для пропуска оставшейся части текущей итерации и перехода к следующей?
1) break
2) continue
3) return
4) exit
2
Какой цикл используется, когда вы не знаете, сколько раз должен выполняться код?
1) for
2) while
3) do while
4) if
2
Каков синтаксис цикла for в C++?
1) for (инициализация; условие; приращение) { код }
2) for (инициализация; приращение; условие) { код }
3) for (условие; инициализация; приращение) { код }
4) for (приращение; инициализация; условие) { код }
1
Каков синтаксис цикла while в C++?
1) while (условие) { код }
2) while (код) { условие }
3) while (приращение) do { условие }
4) while (инициализировать) { код }
1
Каков синтаксис цикла do-while в C++?
1) do {код} while (условие);
2) while (условие) { сделать код; }
3) while (код) { сделать условие; }
4) do {условие} while (код);
1
Каково назначение оператора инициализации в цикле for?
1) Чтобы установить начальное значение переменной управления контуром
2) Чтобы установить конечное значение переменной управления циклом
3) Чтобы установить значение приращения переменной управления циклом
4) Для установки типа переменной управления циклом
1
Каково назначение оператора условия в цикле?
1) Установить начальное значение переменной управления контуром
2) Установить конечное значение переменной управления циклом
3) Проверить, должен ли цикл продолжаться или нет
4) Для установки типа переменной управления циклом
3
Каково назначение оператора приращения в цикле?
1) Чтобы установить начальное значение переменной управления контуром
2) Чтобы установить конечное значение переменной управления циклом
3) Для установки типа переменной управления циклом
4) Чтобы изменить значение переменной управления контуром
4
Сколько раз будет выполняться цикл for с этим условием: for (int i = 0; i < 5; i++) ?
1) 0 раз
2) 1 раз
3) 4 раза
4) 5 раз
4
Сколько раз будет выполняться цикл while с этим условием: while (i < 10) ?
1) 0 раз
2) 1 раз
3) 9 раз
4) Бесконечное количество раз, i никогда не увеличивается
4
Сколько раз будет выполняться цикл do-while с этим условием: do {код} while (i < 10) ?
1) 0 раз
2) 1 раз
3) 9 раз
4) Бесконечное количество раз, если я никогда не увеличивается
2
Какой цикл лучше всего использовать, когда вы хотите выполнить итерацию по контейнеру, например, массиву или вектору?
1) for
2) while
3) do while
4) if
1
Что такое бесконечный цикл?
1) Цикл, который выполняется только один раз
2) Цикл, который выполняется фиксированное количество раз
3) Цикл, который выполняется до тех пор, пока не будет выполнено условие
4) Цикл, который выполняется бесконечно
4
Как выйти из бесконечного цикла?
1) Используйте оператор break
2) Используйте оператор continue
3) Используйте оператор return
4) Используйте оператор выхода
1
Как перейти к следующей итерации цикла без преждевременного выхода из цикла?
1) Используйте оператор break
2) Используйте оператор continue
3) Используйте оператор return
4) Используйте оператор выхода
2
Каково назначение переменной управления циклом?
1) Завершить цикл при выполнении определенного условия
2) Итерация по контейнеру
3) Чтобы контролировать, сколько раз выполняется цикл
4) Для установки типа петли
3
Сколько раз будет выполняться цикл в следующем фрагменте программы: x = 5; do {x = x + 2;} while (x <= 10)?
1) ни разу
2) 2 раза
3) бесконечное число раз
4) 3 раза
4
Можно ли в цикле for опустить оператор инициализации?
1) Нет
2) Да, но это плохая практика
3) Да, но это необязательно
4) Да, но только если оператор условия также опущен
3
Можно ли в цикле while опустить оператор условия?
1) Нет
2) Да, но это плохая практика
3) Да, но это необязательно
4) Да, но только если оператор приращения также опущен
1
Можно ли в цикле do-while опустить оператор кода?
1) Нет
2) Да, но это плохая практика
3) Да, но это необязательно
4) Да, но только если оператор условия также опущен
4
Какой цикл используется, когда вы хотите выполнить код хотя бы один раз, но только при выполнении определенного условия?
1) for
2) while
3) do while
4) if
4
Какой цикл используется, когда вы хотите выполнить итерацию по контейнеру в обратном порядке?
1) for
2) while
3) do while
4) if
1
В чем разница между циклом while и циклом do while?
1) Цикл do-while сначала выполняет код, а затем проверяет условие, в то время как цикл while сначала проверяет условие, а затем выполняет код
2) Цикл while можно использовать для итерации по контейнеру, а цикл do while — нет
3) Цикл while требует оператора инициализации, а цикл do while — нет
4) Цикл do while требует оператора условия, а цикл while — нет
1
Какой цикл используется, когда вы хотите перебрать диапазон значений, например массив или вектор?
1) for
2) while
3) do while
4) Цикл for на основе диапазона
4 
В чем разница между циклом for и циклом for на основе диапазона?
1) Цикл for можно использовать только с массивами, а цикл for на основе диапазона можно использовать с любым контейнером
2) Для цикла for требуется оператор инициализации, а для цикла for на основе диапазона — нет
3) Для цикла for требуется оператор условия, а для цикла for на основе диапазона — нет
4) Цикл for на основе диапазона автоматически выполняет итерацию по контейнеру, в то время как цикл for требует использования переменной управления циклом
4
Можно ли вкладывать циклы в другие циклы?
1) Нет, нельзя
2) Да, но это плохая практика
3) Да, можно
4) Да, но только с определенными типами петель
3
Тема 2. Массивы (одномерные и двумерные)
Что такое массив в C++?
1) Совокупность переменных одного типа
2) Набор переменных разных типов
3) Набор переменных одного или разных типов
4) Ничего из вышеперечисленного
1
Какое максимальное количество элементов может содержать массив в C++?
1) 100
2) 1000
3) 10000
4) Максимальный предел не установлен.
4
Как можно объявить массив в C++?
1) int array[];
2) int array[10];
3) int array()
4) Ничего из вышеперечисленного
2
Каков синтаксис доступа к элементу массива в C++?
1) array(индекс)
2) array[индекс]
3) array{индекс}
4) Ничего из вышеперечисленного
2
Как можно инициализировать массив в C++?
1) int array[] = {1, 2, 3};
2) int array = {1, 2, 3};
3) array[] = {1, 2, 3};
4) Ничего из вышеперечисленного
1
В чем разница между массивом и указателем в C++?
1) Массив — это набор переменных одного типа, а указатель — это переменная, в которой хранится адрес памяти другой переменной
2) Массив и указатель — это одно и то же в C++
3) Массив — это набор переменных разных типов, а указатель — это переменная, в которой хранится адрес памяти другой переменной
4) Ничего из вышеперечисленного
1
Как передать массив функции в C++?
1) Передав имя массива в качестве аргумента
2) Передав один элемент массива в качестве аргумента
3) Передав размер массива в качестве аргумента
4) Ничего из вышеперечисленного
1
Что такое двумерный массив в C++?
1) Набор переменных одного типа, расположенных в сетке
2) Набор переменных разных типов, расположенных в сетке
3) Набор массивов одного типа
4) Ничего из вышеперечисленного
1
Каков синтаксис объявления двумерного массива в C++?
1) array int[строки, столбцы];
2) int array[строки][столбцы];
3) int array(строки, столбцы);
4) Ничего из вышеперечисленного
2
Как получить доступ к элементу двумерного массива в C++?
1) array (строка, столбец)
2) array[строка][столбец]
3) array {строка, столбец}
4) Ничего из вышеперечисленного
2
Как можно инициализировать двумерный массив в C++?
1) int array[][] = {{1, 2}, {3, 4}};
2) int array[][] = {1, 2, 3, 4};
3) int array[][] = {1, 2}, {3, 4};
4) Ничего из вышеперечисленного
1
Как передать двумерный массив функции в C++?
1) Передав имя массива в качестве аргумента
2) Передав один элемент массива в качестве аргумента
3) Передав размер массива в качестве аргумента
4) Передавая массив в качестве указателя
4
Каков размер двумерного массива с 3 строками и 4 столбцами?
1) 3
2) 4
3) 7
4) 12
4
Каков синтаксис перебора одномерного массива в C++?
1) for (int i = 0; i < array.length; i++)
2) for (int i = 0; i <= array.length; i++)
3) for (int i = 1; i < array.length; i++)
4) Ничего из вышеперечисленного
1
Каков синтаксис перебора двумерного массива в C++?
1) for (int i = 0; i < array.length; i++) { for (int j = 0; j < array.length; j++) {} }
2) for (int i = 0, j = 0; i < array.length, j < array.length; i++, j++)
3) for (int i = 0; i < array.rows; i++) { for (int j = 0; j < array.columns; j++) {} }
4) Ничего из вышеперечисленного
3
Что такое зубчатый массив в C++?
1) Двумерный массив, в котором каждая строка имеет разное количество столбцов
2) Одномерный массив, каждый элемент которого является другим массивом
3) Двумерный массив, в котором каждый столбец имеет разное количество строк
4) Ничего из вышеперечисленного
1
Как объявить зубчатый массив в C++?
1) int array[][] = {{1, 2}, {3, 4, 5}, {6, 7, 8, 9}};
2) int array[] = {{1, 2}, {3, 4, 5}, {6, 7, 8, 9}};
3) int array[][] = {1, 2}, {3, 4, 5}, {6, 7, 8, 9};
4) Ничего из вышеперечисленного
1
Как получить доступ к элементу зубчатого массива в C++?
1) array (строка, столбец)
2) array[строка][столбец]
3) array[строка][элемент]
4) Ничего из вышеперечисленного
3
Дан массив int array[5] = { 3, 10, 7, 9, 2 }. Как обратиться к числу 7?
1) array[3]
2) array[0]
3) array[2]
4) array[7]
3
Верно ли представленное объявление массива: int n; cin >> n; string words[n]? 
1) Да
2) Нет, статический массив нельзя объявлять, имея значение переменной в качестве размера
3) Нет, динамический массив нельзя объявлять, имея значение переменной в качестве размера
4) Ничего из вышеперечисленного
2
Что делает следующий код: int n; cin >> n; int *a = new int [n]; ?
1) Заполняет массив a введенным значением n
2) Создает динамический массив из n элеменов
3) код неверный, будет ошибка
4) Ничего из вышеперечисленного
2
Целочисленный массив А заполнен последовательно числами: 15, 17, 13, 19; укажите, значение элемента массива А[3]?
1) 17
2) 19
3) 15
4) 13
2
Какими способами можно заполнить массив?
1) Ввод с клавиатуры
2) Случайным образом
3) По формуле
4) Все варианты
4
Чем обладает массив данных?
1) Общим именем
2) Одинаковыми значениями
3) Одним типом данных
4) Общим именем и одним типом данных
4
Что такое индекс в массиве?
1) Значение элемента массива
2) Имя массива
3) Порядковый номер элемента массива
4) Указатель на массив
3
Какой индекс имеет последний элемент массива array[6]?
1) 6
2) 7
3) 5
4) 0
3
Как определяется номер элемента двумерного массива?
1) Порядковым номером элемента в линейной таблице
2) Номером строки элемента в таблице
3) Номером столбца элемента в таблице
4) Пересечением строки и столбца елемента в таблице
4
Что делает следующий фрагмент кода: int a = 0; for(int count = 0; count < 10; count++) {a += array[count];}?
1) Подсчитывает количество элементов в массиве array
2) Вычисляет максимальный элемент из первых 10
3) Подсчитывает сумму первых 10 элементов массива array
4) Вычисляет сумму индексов массива array
3
Какое из следующих утверждений неверно?
1) Если каждый элемент массива определяется с помощью одного номера, то такой массив называется одномерным
2) В двумерных массивах первый номер указывает на строку, второй  -  на положение элемента в строке
3) Номер элемента в массиве называют индексом
4) Строки двумерного массива могут иметь неодинаковую длину
4
Дан двумерный массив array[7][5]. Какого элемента нет в этом массиве?
1) array[5][2]
2) array[0][2]
3) array[6][4]
4) array[7][8]
4
Тема 3. Строки
Какой заголовочный файл нужно подключить для работы со строками в C++?
1) <iomanip>
2) <iostream>
3) <string>
4) <fstream>
3
Частью какого пространства имен является строковый класс C++?
1) void
2) main
3) string
4) iostream
3
Что из нижеперечисленного не является допустимым способом инициализации строки C++?
1) string str = "Привет";
2) string ул("Привет");
3) string str = {'H', 'e', 'l', 'l', 'o'};
4) string str = 123;
4
Что выводит следующий код: char str[100] = "Привет"; cout << str[1]; ?
1) П
2) р
3) л
4) Привет
2
Что выводит следующий код: char str[100] = "Привет"; cout << strlen(str); ?
1) 4
2) 5
3) 6
4) 7
2
Как мы можем соединить две строки в C++?
1) Использование оператора +
2) Использование оператора -
3) Использование оператора *
4) Использование оператора /
1
Что выводит следующий код: char str1[100] = "Привет"; char str2[100] = "Привет"; if (str1 == str2) cout << "Оба одинаковые"; else cout << "Не то же самое"; ?
1) Оба одинаковы
2) Не то же самое
3) Ошибка
4) Ничего из вышеперечисленного
1
Что выводит следующий код: char str1[100] = "Привет"; char str2[100] = "Мир"; if (str1 == str2) cout << "Оба одинаковые"; else cout << "Не то же самое"; ?
1) Оба одинаковы
2) Не то же самое
3) Ошибка
4) Ничего из вышеперечисленного
2
Какая функция определяет длину строки?
1) strncpy(s1,s2, n)
2) strlen(имя_строки)
3) strcpy(s1,s2)
4) strncat(s1,s2,n)
2
Какая функция выполняет побайтное копирование символов из строки  s2 в строку s1?
1) isdigit(c)
2) strlen(имя_строки)
3) strcpy(s1,s2)
4) strncat(s1,s2,n)
3
Какая функция выполняет побайтное копирование n символов из строки  s2 в строку s1, возвращает значение s1?
1) strncpy(s1,s2, n)
2) strcat(s1,s2)
3) strnicmp(s1,s2,n)
4) isalnum(c)
1
Какая функция объединяет строку s2 со строкой s1. Результат сохраняется в s1?
1) strncat(s1,s2,n)
2) isalnum(c)
3) strcat(s1,s2)
4) strncmp(s1,s2,n)
3
Какая функция объединяет n символов строки s2 со строкой s1. Результат сохраняется в s1?
1) strncat(s1,s2,n)
2) isdigit(c)
3) strnicmp(s1,s2,n)
4) strlen(имя_строки)
1
Какая функция сравнивает строку s1 со строкой s2 и возвращает результат типа int: 0 – если строки эквивалентны, > 0 – если s1 < s2, < 0 — если s1 > s2. С учётом регистра? 
1) isalnum(c)
2) strcmp(s1,s2)
3) strnicmp(s1,s2,n)
4) islower(c)
2
Какая функция сравнивает n символов строки s1 со строкой s2 и возвращает результат типа int: 0 – если строки эквивалентны, > 0 – если s1 < s2, < 0 — если s1 > s2. С учётом регистра? 
1) islower(c)
2) strcmp(s1,s2)
3) strncmp(s1,s2,n)
4) strnicmp(s1,s2,n)
3
Какая функция сравнивает n символов строки s1 со строкой s2 и возвращает результат типа int: 0 – если строки эквивалентны, > 0 – если s1 < s2, < 0 — если s1 > s2. Без учёта регистра? 
1) strcmp(s1,s2)
2) isupper(c)
3) strncat(s1,s2,n)
4) strnicmp(s1,s2,n)
4
Какая функция возвращает значение true, если с является буквой или цифрой, и false в других случаях? 
1) isdigit(c)
2) isalnum(c)
3) isupper(c)
4) strspn(s1,s2)
2
Какая функция возвращает значение true, если с является буквой, и false в других случаях?
1) isalnum(c)
2) strcspn(s1,s2)
3) isalpha(c)
4) islower(c)
3
Какая функция возвращает значение true, если с является цифрой, и false в других случаях?
1) strcspn(s1,s2)
2) isupper(c)
3) isdigit(c)
4) islower(c)
3
Какая функция возвращает значение true, если с является буквой нижнего регистра, и false в других случаях?
1) islower(c)
2) strspn(s1,s2)
3) strnicmp(s1,s2,n)
4) isdigit(c)
1
Какая функция возвращает значение true, если с является буквой верхнего регистра, и false в других случаях?
1) isspace(c)
2) isalpha(c)
3) strcspn(s1,s2)
4) isupper(c)
4
Какая функция возвращает значение true, если с является пробелом, и false в других случаях? 
1) isspace(c)
2) strnicmp(s1,s2,n)
3) stricmp(s1,s2)
4) isalpha(c)
1
Какая функция реализует: если символ с, является символом нижнего регистра, то функция возвращает преобразованный символ с в верхнем регистре, иначе символ возвращается без изменений? 
1) isalpha(c)
2) isspace(c)
3) toupper(c)
4) strprbk(s1,s2)
3
Какая функция реализует поиск первого вхождения символа с в строке s. В случае удачного поиска возвращает указатель на место первого вхождения символа с. Если символ не найден, то возвращается ноль?
1) strprbk(s1,s2)
2) strchr(s,c)
3) strspn(s1,s2)
4) strcspn(s1,s2)
2
Какая функция определяет длину начального сегмента строки s1, содержащего те символы, которые не входят в строку s2? 
1) strcspn(s1,s2)
2) isspace(c)
3) isalpha(c)
4) strchr(s,c)
1
Какая функция возвращает длину начального сегмента строки s1, содержащего только те символы, которые входят в строку s2?
1) strprbk(s1,s2)
2) isupper(c)
3) toupper(c)
4) strspn(s1,s2)
4
Какая функция возвращает указатель  первого вхождения любого символа строки s2 в строке s1?
1) toupper(c)
2) isupper(c)
3) strprbk(s1,s2)
4) strspn(s1,s2)
3
Какая функция преобразует строку s1 в тип double? 
1) strprbk(s1,s2)
2) isdigit(c)
3) toupper(c)
4) atof(s1)
4
Какая функция преобразует строку s1 в тип int?
1) atoi(s1)
2) isdigit(c)
3) strchr(s,c)
4) strprbk(s1,s2)
1
Какая функция считывает символ с со стандартного потока ввода, возвращает символ в формате int? 
1) isalpha(c)
2) getchar(с)
3) isdigit(c)
4) strprbk(s1,s2)
2
Тема 4. Рекурсия
Что такое рекурсия в C++?
1) Метод многократного повторения набора инструкций
2) Способ избежать циклов в программировании
3) Метод вызова функции из самой себя
4) Метод возврата нескольких значений из функции.
3
Что из следующего НЕ является характеристикой рекурсии?
1) Включает в себя базовый случай
2) Включает рекурсивный случай
3) Включает в себя петлю
4) Включает функцию, вызывающую саму себя
3
Что такое базовый случай в рекурсии?
1) Случай, когда функция вызывает сама себя
2) Случай, когда функция перестает вызывать себя
3) Случай, когда функция возвращает значение
4) Случай, когда функция имеет несколько операторов возврата
2
Какова цель базового случая в рекурсии?
1) Чтобы программа работала быстрее
2) Сделать программу более эффективной
3) Чтобы предотвратить бесконечную рекурсию
4) Чтобы программа могла обрабатывать несколько входных данных
3
Какое максимальное количество раз функция может вызвать себя в рекурсии?
1) Это зависит от памяти компьютера
2) Это зависит от сложности функции
3) Это зависит от языка программирования
4) Максимальное количество не ограничено
1
Что из следующего является примером рекурсивной функции?
1) Функция, которая сортирует массив
2) Функция, вычисляющая сумму массива
3) Функция, вычисляющая факториал числа
4) Функция, которая ищет элемент в массиве
3
Что выводит следующий фрагмент кода: int printNumbers(int n) { if (n <= 0) return 1; cout << n << " "; printNumbers(n-1); } int main() { printNumbers(5); return 1; }?
1) 5 4 3 2 1
2) 1 2 3 4 5
3) 5 5 5 5 5
4) 1 1 1 1 1
1
Какое из следующих утверждений о рекурсивных функциях верно?
1) Рекурсивные функции всегда быстрее, чем нерекурсивные функции
2) Рекурсивные функции всегда легче понять, чем нерекурсивные функции
3) Рекурсивные функции могут занимать много памяти
4) Рекурсивные функции могут использоваться только в определенных языках программирования
3
Что выводит следующий фрагмент кода: int fibonacci (int n) { if (n == 0) return 0; else if (n == 1) return 1; else return fibonacci(n-1) + fibonacci(n-2); } int main() { cout << fibonacci(6); return 1; } ?
1) 0
2) 1
3) 8
4) 13
3
Выберите пропущенное слово: "В рекурсивном определении должно присутствовать ..., при выходе на которое дальнейшая инициация рекурсивных обращений прекращается".
1) условие продолжения
2) цепь
3) ограничение
4) нет верного ответа
3
Что такое хвостовая рекурсия в C++?
1) Тип рекурсии, который включает вызов функции из самой себя
2) Тип рекурсии, при котором функция вызывается в конце самой себя
3) Тип рекурсии, при котором функция вызывается перед самой собой
4) Тип рекурсии, который включает вызов функции после цикла
2
В чем преимущество использования хвостовой рекурсии?
1) Уменьшает объем памяти, используемой программой
2) Это ускоряет работу программы
3) Это позволяет программе обрабатывать несколько входных данных
4) Это легче понять, чем обычную рекурсию
1
Какая рекурсия называется прямой?
1) Рекурсия, при которой две функции вызывают друг друга
2) Рекурсия, при которой более двух функций вызывают друг друга
3) Рекурсия, при которой функция вызывает сама себя
4) Нет правильного ответа
3
Какая из следующих функций является рекурсивной?
1) void print(int n);
2) void swap(int &x, int &y);
3) void sort(int arr[], int n);
4) void factorial(int n);
4
Какой будет результат выполнения функции factorial(5)?
1) 5
2) 10
3) 15
4) 120
4
Какой будет результат выполнения функции factorial(0)?
1) 0
2) 1
3) 2
4) Ошибка компиляции
2
Какой будет результат выполнения функции factorial(-1)?
1) -1
2) 0
3) 1
4) Ошибка компиляции
4
Какой будет результат выполнения функции fib(7), (fib - функция, которая возвращает n-е число Фибоначчи)? 
1) 7
2) 8
3) 13
4) 21
3
Какой будет результат выполнения функции fib(0), (fib - функция, которая возвращает n-е число Фибоначчи)?
1) 0
2) 1
3) 2
4) Ошибка компиляции
2
Может ли рекурсивная функция вызывать другие функции, не относящиеся к ней самой?
1) Да
2) Да, но с помощью дополнительной библиотеки
3) Да, но с помощью заголовочного файла
4) Нет
1
Может ли рекурсивная функция вызывать сама себя более одного раза в одном вызове?
1) Да
2) Да, но с помощью дополнительной библиотеки
3) Да, но через дополнительную функцию
4) Нет
4
Может ли рекурсивная функция вызывать сама себя с разными параметрами в одном вызове?
1) Да
2) Да, но с помощью дополнительной библиотеки
3) Да, но через дополнительную функцию
4) Нет
1
Что произойдет, если вызвать рекурсивную функцию слишком много раз?
1) Ошибка компиляции
2) Ошибка времени выполнения
3) Программа продолжит работать, но может зациклиться или выйти за границы стека
4) Нет правильного ответа
3
Можно ли заменить рекурсивную функцию на итеративную?
1) Да
2) Да, но с помощью дополнительной библиотеки
3) Да, но через дополнительную функцию
4) Нет
1
Как вычислить n-ое число Фибоначчи без использования рекурсии?
1) Используя цикл for
2) Используя цикл while
3) Используя формулу Бине
4) Нет правильного ответа
3
Какие из перечисленных задач могут быть решены с помощью рекурсии: 1) поиск пути между двумя городами; 2) вычисление суммы элементов одномерного массива; 3) вычисление арифметической прогрессии?
1) 13
2) 123
3) 23
4) Нет правильного ответа
2
Что такое шаг рекурсии?
1) Одно выполнение рекурсивной функции
2) Вызов самой себя функцией
3) Базовый случай
4) Нет правильного ответа
2
Какое достоинство имеет использование рекурсии?
1) Компактность записи функции 
2) Отсутствие возможности переполнения стека
3) Уменьшение использумой памяти 
4) Упрощение используемых функций
1
Что такое глубина рекурсии?
1) Условие, которое будет удовлетворено и при котором функция выполняет свою задачу без рекурсивных вызовов 
2) Число рекурсивных вызовов в каждый конкретный момент времени 
3) Число рекурсивных вызовов
4) Максимальное число рекурсивных вызовов без возвратов, которое происходит во время выполнения программы 
4
Какие утверждения являются неверными? а) При прямой рекурсии функция вызывает сама себя; б) При прямой рекурсии две и более функций вызывают друг друга; в) При косвенной рекурсии функция вызывает сама себя; г) При косвенной рекурсии две и более функций вызывают друг друга; 
1) а, г
2) а, б
3) б, в
4) в, г
3
Тема 5. Структуры
Что такое структура в языке C++?
1) Совокупность данных разных типов в одной переменной
2) Объект, состоящий из методов и переменных
3) Тип данных для хранения текста
4) Синоним для класса
1
Как объявить структуру в C++?
1) struct myStruct { int x; float y; };
2) int myStruct { int x; float y; };
3) myStruct { int x; float y; };
4) struct { int x; float y; } myStruct;
1
Как обращаться к членам структуры?
1) myStruct.x
2) myStruct;x
3) x.myStruct
4) x;myStruct
1
Какой оператор используется для доступа к членам структуры по указателю?
1) .
2) ->
3) *
4) &
2
Как объединить несколько структур в одну?
1) Использовать наследование
2) Использовать композицию
c) Использовать агрегацию
4) Нельзя объединить структуры в одну
3
Как объявить переменную структурного типа?
1) myStruct x;
2) x.myStruct;
3) int x.myStruct;
4) myStruct { int x; float y; } x;
1
Как передать структуру в функцию по значению?
1) void myFunc(myStruct x);
2) void myFunc(myStruct &x);
3) void myFunc(myStruct *x);
4) void myFunc(myStruct const x);
1
Как передать структуру в функцию по ссылке?
1) void myFunc(myStruct x);
2) void myFunc(myStruct &x);
3) void myFunc(myStruct *x);
4) void myFunc(myStruct const x);
2
Как передать структуру в функцию по указателю?
1) void myFunc(myStruct x);
2) void myFunc(myStruct &x);
3) void myFunc(myStruct *x);
4) void myFunc(myStruct const x);
3
Как получить размер структуры в байтах?
1) sizeof(myStruct)
2) myStruct->getSize()
3) myStruct.size()
4) myStruct.length()
1
Можно ли вложить структуру в другую структуру?
1) Да
2) Да, но необходимо использовать дополнительную функцию 
3) Да, но необходимо использовать дополнительную библиотеку
4) Нет
1
Как объявить вложенную структуру?
1) struct myStruct { int x; struct nestedStruct { float y; }; };
2) struct myStruct { int x; nestedStruct { float y; }; };
3) struct myStruct { int x; float y; }; struct nestedStruct { float z; };
4) struct myStruct { int x; struct { float y; }; };
1
Как обратиться к члену вложенной структуры?
1) myStruct.nestedStruct.y
2) myStruct->nestedStruct->y
3) myStruct.nestedStruct->y
4) myStruct->nestedStruct.y
1
Можно ли использовать структуру в качестве аргумента шаблона?
1) Да
2) Да, но необходимо использовать дополнительную функцию 
3) Да, но необходимо использовать дополнительную библиотеку
4) Нет
1
Как объявить шаблонную структуру?
1) template <typename T> struct myStruct { T x; };
2) struct myStruct { template <typename T> T x; };
3) struct myStruct { T x; }; template <typename T>;
4) struct template <typename T> myStruct { T x; };
1
Как объявить конструктор структуры?
1) myStruct() {}
2) void myStruct() {}
3) int myStruct() {}
4) myStruct(int x, float y) { this->x = x; this->y = y; }
4
Как объявить переменную типа структуры в C++?
1) struct myStruct = new myStruct;
2) struct myStruct = {};
3) myStruct myVar = {};
4) myStruct myVar = new myStruct;
3
Как объявить член структуры в C++?
1) int myMember;
2) myStruct::int myMember;
3) struct myStruct { int myMember; };
4) class myStruct { int myMember; };
3
Могут ли поля структуры быть разными типами данных?
1) Да
2) Да, но только int и double
3) Да, но только без других структур данных
4) Нет
1
Можно ли передавать структуры в функцию в C++?
1) Да
2) Нет
3) Только по ссылке
4) Только по указателю
1
Можно ли инициализировать структуру при ее объявлении в C++?
1) Да
2) Нет
3) Только члены-константы
4) Только члены-указатели
1
Что такое вложенная структура в C++?
1) Структура, содержащая другую структуру внутри себя
2) Структура, объявленная внутри функции
3) Структура, наследующая от другой структуры
4) Структура, имеющая ссылку на другую структуру
1
Выберите верное утверждение: упрощение структуры программы всегда приводит 
1) к уменьшению количества повторяющихся фрагментов
2) к увеличению ее быстродействия 
3) к усложению ее отладки
4) к увеличению количества классов
1
Можно ли создать объект вложенной структуры без создания объекта родительской структуры в C++?
1) Да
2) Нет
3) Только если вложенная структура статическая
4) Только если родительская структура абстрактная
2
Можно ли наследовать структуру в C++?
1) Да
2) Нет
3) Только от класса
4) Только от другой структуры
1
Какая структура данных в C++ может содержать различные типы данных?
1) Массив
2) Структура
3) Класс
4) Список
2
Как называется процесс унаследования в C++?
1) Объединение
2) Компиляция
3) Наследование
4) Инициализация
3
Какой оператор используется для доступа к членам структуры по значению?
1) ::
2) .
3) ->
4) #
2
Какой тип доступа можно использовать для членов структуры?
1) private
2) protected
3) public
4) все перечисленные
4
Как объявляется член структуры с публичным доступом?
1) public int x;
2) private int x;
3) protected int x;
4) int x;
4
Тема 6. Файлы
Что такое файл?
1) именованная область данных на носителе информации, используемая как базовый объект взаимодействия с данными в операционныъ системах
2) поддающиеся многократной интерпретации представление информации в формализованном виде, пригодном для передачи связи или обработки
3) показатель того, сколько данных содержит компьютерный файл
4) идентификатор, указанный в качестве суффикса к имени компьютерного файла
1
Что такое размер файла? 
1) именованная область данных на носителе информации, используемая как базовый объект взаимодействия с данными в операционныъ системах
2) поддающиеся многократной интерпретации представление информации в формализованном виде, пригодном для передачи связи или обработки
3) показатель того, сколько данных содержит компьютерный файл
4) идентификатор, указанный в качестве суффикса к имени компьютерного файла
3
Что такое расширение имени файла?
1) именованная область данных на носителе информации, используемая как базовый объект взаимодействия с данными в операционныъ системах
2) поддающиеся многократной интерпретации представление информации в формализованном виде, пригодном для передачи связи или обработки
3) показатель того, сколько данных содержит компьютерный файл
4) идентификатор, указанный в качестве суффикса к имени компьютерного файла
4
Как открыть файл в режиме записи С++?
1) open("file.txt", std::ios::out);
2) open("file.txt", std::ios::in);
3) open("file.txt", std::ios::app);
4) open("file.txt", std::ios::binary);
1
Как открыть файл в режиме чтения С++?
1) open("file.txt", std::ios::out);
2) open("file.txt", std::ios::in);
3) open("file.txt", std::ios::app);
4) open("file.txt", std::ios::binary);
2
Как открыть файл в режиме дозаписи С++?
1) open("file.txt", std::ios::out);
2) open("file.txt", std::ios::in);
3) open("file.txt", std::ios::app);
4) open("file.txt", std::ios::binary);
3
Как открыть файл в бинарном режиме С++?
1) open("file.txt", std::ios::out);
2) open("file.txt", std::ios::in);
3) open("file.txt", std::ios::app);
4) open("file.txt", std::ios::binary);
4
Как закрыть файл в C++?
1) close();
2) end();
3) exit();
4) return();
1
Как проверить, успешно ли открылся файл в C++?
1) is_open();
2) is_closed();
3) is_empty();
4) is_full();
1
Как проверить, достигнут ли конец файла в C++?
1) eof();
2) eol();
3) eob();
4) eop();
1
Как получить символ из файла в C++?
1) get();
2) read();
3) getline();
4) put();
1
Как записать символ в файл в C++?
1) put();
2) write();
3) getline();
4) read();
1
Как получить строку из файла в C++?
1) get();
2) read();
3) getline();
4) put();
3
Как записать строку в файл в C++?
1) put();
2) write();
3) getline();
4) read();
2
Как переместить указатель на определенную позицию в файле?
1) seekp();
2) seekg();
3) tellp();
4) tellg();
2
Как узнать текущую позицию указателя в файле?
1) seekp();
2) seekg();
3) tellp();
4) tellg();
4
Как скопировать содержимое одного файла в другой файл в C++?
1) copy();
2) move();
3) swap();
4) replace();
1
Какая функция возвращает текущий код ошибки?
1) clearerr();
2) error();
3) ferror();
4) return();
3
Как удалить файл в C++?
1) delete();
2) remove();
3) erase();
4) destroy();
2
Как открыть файл в режиме чтения и записи в С++?
1) ofstream file("filename.txt");
2) ifstream file("filename.txt");
3) fstream file("filename.txt", ios::out);
4) fstream file("filename.txt", ios::in | ios::out);
4
Как проверить, был ли файл успешно открыт?
1) if (file.good())
2) if (file.fail())
3) if (file.eof())
4) if (file.bad())
1
Как переименовать файл в C++?
1) rename();
2) move();
3) copy();
4) replace();
1
Как записать данные в файл?
1) file >> "data";
2) file.write("data", 4);
3) file.write("data");
4) file.read("data", 4);
2
Как прочитать данные из файла?
1) file << data;
2) getline(file, data);
3) file.read(data, size);
4) file.write(data, size);
2
Какой заголовочный файл необходимо подключить для работы с файлами в С++?
1) fstream
2) string
3) iostream
4) cmath
3
Как создать новый файл?
1) ofstream file("newfile.txt");
2) ifstream file("newfile.txt");
3) fstream file("newfile.txt", ios::out);
4) fstream file("newfile.txt", ios::in);
1
Как удалить файл в C++?
1) remove("filename.txt");
2) delete_file("filename.txt");
3) unlink("filename.txt");
4) erase("filename.txt");
1
Какой из стандартных классов используется для вывода строк, считанных из файла, на терминал?
1) strstream 
2) ostream 
3) ofstream 
4) istream 
2
Какой объект класса надо использовать, для того чтобы выполнить чтение из файла с произвольной позиции?
1) strstream 
2) ostream 
3) ofstream 
4) ifstream
4
Какой класс используется для вывода данных, считанных из файла, во внутреннюю область памяти?
1) iostream 
2) strstream 
3) cout
4) strout 
2
Тема 7. Адреса и указатели
Что такое указатель в C++?
1) Переменная, которая хранит значение адреса в памяти
2) Переменная, которая хранит значение в памяти
3) Тип данных для хранения адресов в памяти
4) Тип данных для хранения целых чисел
1
Как объявить указатель в C++?
1) int ptr;
2) int *ptr;
3) int &ptr;
4) int &&ptr;
2
Каким символом обозначается операция взятия адреса в C++?
1) %
2) *
3) $
4) &
4
Что такое двойной указатель в C++?
1) Указатель, который может указывать на две разные области памяти
2) Указатель, указывающий на другой указатель
3) Указатель на массив указателей
4) Указатель на функцию, которая возвращает указатель
2
Каким образом можно обратиться к значению, сохраненному в адресе, хранящемся в указателе?
1) Используя оператор +
2) Используя оператор *
3) Используя оператор /
4) Используя оператор -
2
Каким образом можно изменять значение, хранящееся по адресу, на который указывает указатель?
1) Используя оператор -
2) Используя оператор *
3) Используя оператор +
4) Используя оператор &
2
Можно ли использовать указатель для доступа к элементам массива?
1) Да
2) Да, но необходима дополнительная функция
3) Да, но необходима дополнительная библиотека
4) Нет
1
Что произойдет, если попытаться разыменовать нулевой указатель?
1) Программа завершится с ошибкой
2) Будет возвращено значение NULL
3) Указатель станет равен адресу памяти 0
4) Ничего не произойдет
1
Каким образом можно передать указатель в функцию в C++?
1) По значению
2) По ссылке
3) По значению и ссылке
4) Нельзя передать указатель в функцию
2
Что такое указатель на указатель?
1) Указатель, который хранит значение адреса другого указателя
2) Указатель, который может хранить несколько адресов
3) Указатель, который может указывать на любой тип данных
4) Указатель, который не может быть разыменован
1
Каким образом можно создать указатель на указатель?
1) Использовать оператор ++
2) Использовать оператор &
3) Использовать оператор *
4) Использовать оператор &&
3
Как осуществляется передача указателя на указатель в функцию в C++?
1) По значению
2) По ссылке
3) По значению и ссылке
4) Нельзя передать указатель на указатель в функцию
2
Можно ли передать массив в функцию по указателю и по ссылке в C++?
1) Да
2) Да, но только по ссылке
3) Да, но только по указателю
4) Нет
1
Что такое константный указатель?
1) Указатель, значение которого не может быть изменено
2) Указатель, который указывает на константу
3) Указатель, который не может быть разыменован
4) Указатель, который хранит значение только в стеке
1
На сколько увеличится p_qwe при выполнении оператора p_qwe ++; в программе float qwe[100]; float *p_qwe=qwe; :
1) на 4
2) на 2
3) на 1
4) на 11
3
Что такое адрес переменной в C++?
1) Это значение переменной
2) Это ссылка на переменную
3) Это место в памяти, где хранится значение переменной
4) Это значение, которое можно присвоить переменной
3
Что обозначают fcp и *p_fcp в программе int *p_fcp = &fcp:
1) обозначают значение переменной fcp
2) обозначают адрес переменной fcp в памяти
3) обозначают значение переменной p_fcp
4) обозначают адрес переменной p_fcp в памяти
2
Что произойдет при выполнении кода: int *p = NULL; ?
1) Создастся указатель на указатель
2) Создастся нулевой указатель
3) Выполнение программы завершится с ошибкой
4) Создастся указатель на нулевое значение
2
На какой элемент массива arr будет указывать p_ при выполнении оператора p_ += 5;  в программе float arr[100]; float *p_ = arr[3]:
1) на 9
2) на 5
3) на 8
4) на 1
3
Каким символом обозначается оператор разыменования в C++?
1) &
2) #
3) %
4) *
4
Что произойдет при выполнении следующего кода: int *p = new int; delete p; ?
1) Создастся указатель на указатель
2) Создастся нулевой указатель
3) Выделится память под целое число и присвоится указателю p, затем эта память освободится
4) Выделится память под указатель и присвоится указателю p, затем эта память освободится
3
Что такое нулевой указатель?
1) Это указатель, который указывает на -1
2) Это указатель, который указывает на null
3) Это указатель, который указывает на некорректную память
4) Это указатель, который указывает на правильную память
2
Какая из следующих строк кода приведет к ошибке компиляции?
1) int *p;
2) int *p = new int;
3) int *p = NULL;
4) int *p = x;
4
Что выводит следующий фрагмент кода? int ptr[] = {1, 2, 3, 4, 5}; int *ptr = ptr; cout << *(ptr + 3) << endl; 
1) 1
2) 2
3) 3
4) 4
4
Что такое арифметика указателей в C++?
1) выполнение математических операций над переменными - указателями
2) выполнение арифметических операций над переменными, хранящимися по адресу указателя
3) и а, и б
4) ничего из вышеперечисленного
1
Что выводит следующий фрагмент кода? int х = 5; int *ptr = &x; int у = *ptr; cout << у << endl;
1) значение х
2) адрес х
3) ошибка
4) ничего из вышеперечисленного
1
Какое служебное слово используется при объявлении нетипизированных указателей?
1) retry 
2) conio 
3) void 
4) int 
3
Какое объявление указателя не является правильным?
1) type1 #p1; 
2) type1 %p1;
3) type1 &p1; 
4) все из вышеперечисленных
2
Какая из приведенных ниже записей соответствует объявлению нескольких указателей?
1) type1 *p1,*p2,*p3; 
2) type1 *p1,p2,p3; 
3) type1 #p1,#p2,#p3; 
4) type1 !p1,!p2,!p3;
1
Что определяют несколько символов * возле указателя?
1) Динамическую адресацию 
2) Многоступенчатую адресацию 
3) Априорную адресацию 
4) Статическую адресацию
2
Тема 8. Динамическая память
Что такое динамическая память в C++?
1) Память, выделяемая автоматически при компиляции
2) Память, выделяемая в процессе выполнения программы
3) Память, выделяемая только для массивов
4) Память, недоступная для изменения в процессе выполнения программы
2
Каким оператором производится выделение динамической памяти в C++?
1) new
2) allocate
3) malloc
4) dynamic
1
Каким оператором производится освобождение динамической памяти в C++?
1) delete
2) free
3) deallocate
4) destroy
1
Можно ли использовать оператор delete для освобождения памяти, выделенной с помощью malloc?
1) Да
2) Да, но с дополнительными командами
3) Да, но необходимо подключить дополнительную библиотеку
4) Нет
4
Можно ли изменять размер выделенной динамической памяти?
1) Да
2) Да, но с дополнительными командами
3) Да, но необходимо подключить дополнительную библиотеку
4) Нет
1
Какой тип данных возвращает оператор new при успешном выделении памяти?
1) int
2) void*
3) double
4) string
2
Что произойдет, если оператор new не сможет выделить запрошенную память?
1) Будет возвращено значение NULL
2) Будет вызвано исключение bad_alloc
3) Оператор new всегда успешен
4) Выделится память меньшего размера
2
Каким образом можно проверить, удалось ли выделить динамическую память?
1) Использовать оператор new[]
2) Проверить значение указателя на nullptr (если вы использовали форму new(std::nothrow)размещения)
3) Вывести значение указателя на экран
4) Ничего из вышеперечисленного
2
Как осуществляется доступ к элементам массива, созданного в динамической памяти?
1) Используется оператор []
2) Используется оператор {}
3) Используется оператор ->
4) Элементы доступны по указателю на первый элемент массива
1
Каким образом можно избежать утечек памяти при работе с динамической памятью?
1) Всегда освобождать выделенную память
2) Использовать оператор memset
3) Использовать оператор new[]
4) Никак нельзя избежать утечек памяти
1
Что такое smart pointer?
1) Указатель на элемент массива
2) Указатель на объект в памяти
3) Указатель с автоматическим освобождением памяти
4) Указатель с увеличенной скоростью доступа
3
Какой класс C++ используется для создания умных указателей?
1) smart_ptr
2) smart_pointer
3) std::unique_ptr
4) std::smart_ptr
3
Что произойдет, если вы попытаетесь получить доступ к памяти, которая не была выделена динамически в C++?
1) Программа вылетает
2) программа продолжает выполнение
3) Программа выводит сообщение об ошибке
4) Программа автоматически освобождает ранее выделенную память
1
Какие из этих ключевых слов в C++ используются для выделения и освобождения динамической памяти?
1) static и extern
2) new и delete
3) try и catch
4) friend и virtual
2
Что такое утечка памяти в C++?
1) Когда память освобождается до ее использования
2) Когда память выделяется, но никогда не освобождается
3) Когда память выделяется в стеке
4) Когда память выделяется в куче
2
Какой тип данных возвращается оператором new при выделении памяти?
1) Указатель на тип данных
2) Адрес памяти
3) Ссылка на тип данных
4) Значение типа данных
1
В чем разница между функциями new и malloc в C++?
1) Разницы нет
2) Функция new вызывает конструктор класса, а malloc — нет.
3) Функция malloc возвращает указатель на void, а new возвращает указатель на конкретный выделяемый тип.
4) Функция new может выделять память только для объектов, тогда как malloc может выделять память для любого типа.
2
Что произойдет, если не освободить выделенную динамическую память в C++?
1) Программа завершится аварийно
2) Операционная система автоматически освободит память
3) Память будет занята до окончания работы операционной системы
4) Программа будет работать нормально, но потребует большего объема памяти
3
Основное отличие динамического размещения данных от статического состоит в том, что
1) статические данные размещаются в момент старта программы, динамические – при ее выполнении
2) динамические данные размещаются в момент старта программы, статические - при ее выполнении
3) статические данные размещаются на диске, динамические – в памяти машины
4) статические данные размещаются в памяти машины, динамические – на диске
1
Какой оператор используется для изменения размера выделенной динамической памяти в Cи?
1) realloc
2) resize
3) edit
4) modify
1
Какой метод используется для установки значения элемента в массиве, выделенном динамически в C++?
1) Обращение по индексу
2) Оператор ->
3) Функция at()
4) Функция set()
1
Какие методы могут быть использованы для работы с динамически выделенными массивами в C++?
1) Только операторы new и delete
2) Только функции malloc и free
3) Как функции, так и операторы
4) Только операторы realloc
3
Какой тип данных может быть использован для хранения указателя на динамически выделенную память в C++?
1) int
2) float
3) char
4) любой тип данных
4
Можно ли использовать оператор new для выделения памяти под объекты пользовательского класса в C++?
1) Да
2) Да, но с дополнительными командами
3) Да, но необходимо подключить дополнительную библиотеку
4) Нет
1
Можно ли использовать оператор new для выделения памяти под массивы пользовательского класса в C++?
1) Да
2) Да, но с дополнительными командами
3) Да, но необходимо подключить дополнительную библиотеку
4) Нет
1
Какой тип данных должен быть указан в операторе new при выделении памяти под массив в C++?
1) Любой тип данных
2) Указатель на тип данных
3) Только тип данных int
4) Тип данных size_t
2
Какой оператор используется для освобождения памяти, выделенной под объекты пользовательского класса в C++?
1) delete
2) free
3) remove
4) erase
1
Можно ли изменять размеры динамически выделенной памяти в Си? 
1) Да, без дополнительных условий
2) Да, для этого необходимо использовать realloc
3) Да, для этого необходимо использовать calloc
4) Нет
2
Какое выражение верно с точки зрения целесообразности использования динамического распределения памяти?
1) char* c = new char[5]; c = "aabb"; 
2) char* c = "aabb"; 
3) char c; c = new string("aabb"); 
4) char c; c = new char[5]; c = "aabb";
2
В чем разница между функциями calloc и malloc в C++?
1) разницы нет
2) Функция calloc инициализирует выделенную память значением 0, в то время как malloc этого не делает.
3) Функция malloc может выделять память для массивов, в то время как calloc не может
4) Функция calloc работает быстрее, чем malloc.
2